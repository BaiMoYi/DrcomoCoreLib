---
alwaysApply: true
---
### DrcomoCoreLib：开发者核心守M則 (Developer's Codex)

#### **核心哲学：成为一个纯粹的“军火库”，而非“预制营房”**

`DrcomoCoreLib` 的唯一使命，是为所有依赖它的子插件提供**高复用、零耦合、完全可控**的工具集。它是一个抽象的逻辑工具箱，而非一个具象的功能插件。

我们不创造功能，我们只**赋能创造**。

---

#### **三大基石：构建可靠代码宇宙的三大定律**

所有代码的提交与修改，都必须无条件地建立在这三大基石之上。它们是本项目的“物理法则”，不可违背，不容置疑。

1.  **零硬编码原则 (The Zero Hardcoding Principle)**
    * **定义：** 代码中禁止出现任何写死的配置项，包括但不限于文件名、路径、URL、或配置键。
    * **解读：** 任何可能随环境、需求或子插件不同而变化的值，都必须被视为“变量”，而非“常量”。我们的库不做出任何“自以为是”的假设。

2.  **控制反转原则 (The Inversion of Control Principle)**
    * **定义：** 自身不创建、不管理依赖的生命周期。所有可变行为和外部依赖，都必须通过**构造函数注入 (Constructor Injection)** 或方法参数传递。
    * **解读：** 我们的工具类应该是“嗷嗷待哺的婴儿”，而不是“自给自足的农夫”。它需要什么，就必须由它的创建者（调用方）明确地喂给它。

3.  **单一职责原则 (The Single Responsibility Principle)**
    * **定义：** 每一个类、每一个模块，都应该只做好一件事，并且把它做到极致。
    * **解读：** 严禁将属于子插件的业务逻辑，哪怕只是一行，渗透进核心库的代码中。`DrcomoCoreLib` 只提供锋利的“手术刀”，至于如何“解剖”，那是外科医生（子插件）的事。

---

#### **黄金法则：代码审查的最终标尺**

如果你的修改违背了以下任何一条，它将被无情地驳回。

-   ❌ **严禁写死**任何文件名、路径或配置键（例如 `"lang.yml"`, `"sounds.warnOnMissingKeys"`）。
-   ✅ **必须注入**所有外部依赖，将控制权完全交还给调用者。
-   ✅ **必须保持**模块的纯粹与独立，不越界处理任何不属于它的业务。

**贡献代码，即是认同此约。**